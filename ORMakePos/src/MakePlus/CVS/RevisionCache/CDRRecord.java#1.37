
package MakePlus;

import OpenRate.record.ErrorType;
import OpenRate.record.IError;
import OpenRate.record.RatingRecord;
import OpenRate.record.RecordError;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

/**
 * A CDRRecord corresponds to a unit of work that is being processed by the
 * pipeline. Records are created in the InputAdapter, pass through the Pipeline,
 * and written out in the OutputAdapter. Any stage of the pipeline my update
 * the record in any way, provided that later stages in the processing and the
 * output adapter know how to treat the record they receive.
 *
 * As an alternative, you may define a less flexible record format as you wish
 * and fill in the fields as required, but this costs performance.
 *
 * Generally, the record should know how to handle the following operations by
 * linking the appropriate method:
 *
 * mapOriginalData()   [mandatory]
 * -----------------
 * Transformation from a flat record as read by the input adapter to a formatted
 * record.
 *
 * unmapOriginalData() [mandatory if you wish to write output files]
 * -------------------
 * Transformation from a formatted record to a flat record ready for output.
 *
 * getDumpInfo()       [optional]
 * -------------
 * Preparation of the dump equivalent of the formatted record, ready for
 * dumping out to a dump file.
 *
 * In this simple example, we require only to read the "B-Number", and write the
 * "BNumberNorm" as a result of this. Because of the simplicity of the example
 * we do not perform a full mapping, we just handle the fields we want directly,
 * which is one of the advantages of the BBPA model (map as much as you want or
 * as little as you have to).
 *
 */
public class CDRRecord
  extends RatingRecord
{
  // this is the CVS version info
  public static String CVS_MODULE_INFO = "OpenRate, $RCSfile: CDRRecord.java,v $, $Revision: 1.37 $, $Date: 2011/09/25 18:09:47 $";

  // Used to manage recycles
  public static final String RECYCLE_TAG = "ORRECYCLE";

    // Field Splitter in the records
  public static final String FIELD_SPLITTER = ";";

  // Field Splitter in the records
  public static final int    CDR_RECORD = 20;
  public static final String INPUT_DELIMITER = ",";
  public static final int    EXPECTED_FIELDS = 20;

  // Field offsets for input record
  public static final int IDX_CDR_UID = 0;
  public static final int IDX_ENTRY_DATE = 1;
  public static final int IDX_CALL_REF = 2;
  public static final int IDX_NETWORK = 3;
  public static final int IDX_CALL_TYPE = 4;
  public static final int IDX_REMOTE_NETWORK = 5;
  public static final int IDX_REMOTE_SWITCH = 6;
  public static final int IDX_DIRECTION = 7;
  public static final int IDX_PORTING_PREFIX = 8;
  public static final int IDX_CLI = 9;
  public static final int IDX_DEST = 10;
  public static final int IDX_USAGE_TYPE = 11;
  public static final int IDX_NUMBER_TYPE = 12;
  public static final int IDX_START_DATE = 13;
  public static final int IDX_DURATION = 14;
  public static final int IDX_GUIDING_KEY = 15;
  public static final int IDX_DISPLAY_NUMBER = 16;
  public static final int IDX_PLATFORM = 17;
  public static final int IDX_MACHINE = 18;
  public static final int IDX_LINK_NUMBER = 19;
  public static final int IDX_CALLER = 15;
  public static final int IDX_SERVICE = 3;
    
  // expected format for dates in CDR
  public static final String DATE_FORMAT="yyyy-MM-dd HH:mm:SS";
  public static final String DEFAULT_RESELLER="Live";

  // List of aggregations we are using
  ArrayList<String> AggFilter = new ArrayList<String>();
  
  // Worker variables to save references during processing. 
  public String UID = null;
  public String Type = null;
  public String Direction = null;
  public String Caller = null;
  public String Network = null;
  public String RemoteNetwork = null;
  public String RemoteSwitch = null;
  public String PortingPrefix = null;
  public String Reseller = DEFAULT_RESELLER;
  public String callReference = null;
  public double Duration;
  public String CallType = null;
  public String Destination = null;
  public String CLI = null;
  public String UsageType = null;
  public String DisplayNumber = null;
  public String StartDate = null;
  public String Platform = null;
  public String Machine = null;
  public String LinkNumber = null;
  public String EntryDate = null;
  public String MSN = null;
  public String TimeBand = null;
  
  public String AliasStatus;          // Identifies aliases in test status
  public String NumberType;           // Number type from input event
  public String NumberTypeNorm=null;  // Normalised Number Type
  public String BNumber = null;       // B Number from input event
  public String BNumberNorm = null;   // Normalised B Number
  public String ZoneOrigin;           // Zone origin value, used for price map lookup
  public String ZoneDestination="";   // The zone destination result for the base rateplan
  public String SpecZoneDest = "";    // The zone destination result for a specific rateplan (optional)
  public Long   start_date;           // The start date in milliseconds epoch time, internal variable UTCEventDate is this divided by 1000
  public Long   end_date;             // The end date in milliseconds epoch time

  // These are the variables for the output
  public double retailPrice = 0;      // Calculated retail price, includes discount if applicable
  public double wholeSalePrice = 0;   // Calculated wholesale price, includes discount if applicable
  public double localPolo = 0;        // Calculated local polo, not discounted
  public double localRolo = 0;        // Calculated local rolo, not discounted
  public double localTransit = 0;     // Calculated local transit, not discounted
  public double remotePolo = 0;       // Calculated remote polo, not discounted
  public double remoteRolo = 0;       // Calculated remote rolo, not discounted
  public double remoteTransit = 0;    // Calculated remote transit, not discounted
  public String WholesaleDescription; // Description of the wholesale price
  public String RetailDescription;    // Description of the retail price
  public String LocalCostDescription; // Description of the local cost (polo/rolo) price
  public String RemoteCostDescription;// Description of the remote cost (polo/rolo)  price
  public String LocalTransitDescription;  // Description of the local transit price
  public String RemoteTransitDescription; // Description of the remote transit price
  public String RatePlanUsed; // Name of the RatePlan used 
  public String DestinationDescription; // Description of TierCode 
  
  // SalesForce integration fields
  public int     UserId;              // The OpenRate internal customer ID
  public String  GuidingKey;          // The key we use to locate the customer
  public int     BalanceGroup;        // Key used to locate counter values
  public String  UserTariff;          // The rate plan assigned to a customer, may be specific or base
  public String  BaseRateplan;        // The base rate plan associated with a specific rate plan
  public boolean specificPlan = false;// True if a specific plan is in use, false if we are using a base rate plan
  public String  AggregationID;       // Aggregation ID for linking aggregated values to SalesForce
  public String  FinancialCode;       //
  public String  SuspenseCategory;    // Category for the suspense
  public int     Recycle_Count = 0;   // Numer of times that this record has been recycled
  
  // Discounting
  public String UsedDiscount = "";    // The name of the discount we used
  public String DiscountOption;       // The option which triggered the discount
  public String DiscountRUM;          // The RUM we have discounted
  public int    DiscountCounter = 0;  // The counter id for the discount
  public double DiscountInitValue = 0;// The initial value for the discount
  public String DiscountPeriod;       // The period of the discount
  public String DiscountRule;         // The rule triggered for the discount
  public double DiscountGranted = 0;  // The value granted for the discount
  public long   RecId = 0;            // The bucket id impacted by the discount
   
 /**
  * Constructor for SimpleRecord from DB
  *
  * @param OriginalFields - the already split data we are to map
  */
  public CDRRecord(String[] OriginalFields)
  {
    super();
    
    this.fields = OriginalFields;
    this.RECORD_TYPE = CDR_RECORD;
    this.OriginalData = unmapOriginalData();
  }

 /**
  * Constructor for SimpleRecord from File
  *
  * @param OriginalData - the already split data we are to map
  */
  public CDRRecord(String OriginalData)
  {
    super();
    
    this.OriginalData = OriginalData;
    this.RECORD_TYPE = CDR_RECORD;
  }

  /**
   * We split up the record at the tabs, and put the information into fields
   * so that we can manipulate it as we want.
   *
   */
  public void mapOriginalData()
  {
    this.fields = this.getOriginalData().split(INPUT_DELIMITER,-1);
  }

  /**
   * Reconstruct the record from the field values, replacing the original
   * structure of tab separated records
   *
   * @return The unmapped original data
   */
  private String unmapOriginalData()
  {
    int NumberOfFields;
    int i;
    StringBuilder tmpReassemble;

    // We use the string buffer for the reassembly of the record. Avoid
    // just catenating strings, as it is a LOT slower because of the
    // java internal string handling (it has to allocate/deallocate many
    // times to rebuild the string).
    tmpReassemble = new StringBuilder(1024);

    // write the destination information back
    // this.setField(DESTINATION_IDX, BNumberNorm);
    NumberOfFields = this.fields.length;

    for (i = 0; i < NumberOfFields; i++)
    {
      if (i == 0)
      {
        tmpReassemble.append(this.fields[i]);
      }
      else
      {
        tmpReassemble.append(INPUT_DELIMITER);
        tmpReassemble.append(this.fields[i]);
      }
    }

    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.retailPrice);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.wholeSalePrice);

    return tmpReassemble.toString();
  }

  /**
   * Reconstruct the record from the field values, replacing the original
   * structure of tab separated records - for use in the file output adapter
   * for batch loading
   *
   * @return The unmapped original data
   */
  public String unmapRecordRated()
  {
    StringBuilder tmpReassemble;

    Long currentTime = System.currentTimeMillis()/1000;
      
    // We use the string buffer for the reassembly of the record. Avoid
    // just catenating strings, as it is a LOT slower because of the
    // java internal string handling (it has to allocate/deallocate many
    // times to rebuild the string).
    tmpReassemble = new StringBuilder(1024);

    tmpReassemble.append(this.start_date);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.callReference);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Network);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.CallType);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RemoteNetwork);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RemoteSwitch);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Direction);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.PortingPrefix);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.CLI);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Destination);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.UsageType);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.NumberType);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.EntryDate);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Duration);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.GuidingKey);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.DisplayNumber);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Platform);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Machine);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.LinkNumber);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.OriginalData);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.getErrors().get(0).getMessage());
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.SuspenseCategory);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(currentTime);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.getErrors().get(0).getErrorDescription());

    return tmpReassemble.toString();
  }

  /**
   * Reconstruct the record from the field values, replacing the original
   * structure of tab separated records - for use in the file output adapter
   * for batch loading
   *
   * @return The unmapped original data
   */
  public String unmapRecordReject()
  {
    StringBuilder tmpReassemble;

    // We use the string buffer for the reassembly of the record. Avoid
    // just catenating strings, as it is a LOT slower because of the
    // java internal string handling (it has to allocate/deallocate many
    // times to rebuild the string).
    tmpReassemble = new StringBuilder(1024);

    tmpReassemble.append(this.Type);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Service);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Direction);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Network);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RemoteNetwork);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RemoteSwitch);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.PortingPrefix);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.start_date);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.NumberTypeNorm);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.BNumberNorm);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Caller);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Duration);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.retailPrice);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.wholeSalePrice);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.localPolo);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.localRolo);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.localTransit);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.remotePolo);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.remoteRolo);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.remoteTransit);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Reseller);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.FinancialCode);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.AggregationID);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.callReference);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.NumberType);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Reseller);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.WholesaleDescription);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RetailDescription);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.LocalCostDescription);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RemoteCostDescription);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.LocalTransitDescription);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.RemoteTransitDescription);

    return tmpReassemble.toString();
  }

  /**
   * Return the dump-ready data
   *
   * @return The dump info strings
   */
  public ArrayList<String> getDumpInfo()
  {

    ArrayList<String> tmpDumpList = null;
    tmpDumpList = new ArrayList<String>();

    // Format the fields
    tmpDumpList.add("============ BEGIN RECORD ============");
    tmpDumpList.add("  Record Number   = <" + this.RecordNumber + ">");
    tmpDumpList.add("  Output Streams  = <" + this.getOutputs() + ">");
    tmpDumpList.add("--------------------------------------");
    tmpDumpList.add("  Call Reference  = <" + this.callReference + ">");
    tmpDumpList.add("  GUID            = <" + this.UID + ">");
    tmpDumpList.add("  Record Type     = <" + this.Type + ">");
    tmpDumpList.add("  Direction       = <" + this.Direction + ">");
    tmpDumpList.add("  Service         = <" + this.Service + ">");
    tmpDumpList.add("  Number Type     = <" + this.NumberType + ">");
    tmpDumpList.add("  Number Type Norm= <" + this.NumberTypeNorm + ">");
    tmpDumpList.add("  BNumber         = <" + this.BNumber + ">");
    tmpDumpList.add("  BNumber Norm    = <" + this.BNumberNorm + ">");
    tmpDumpList.add("  Caller          = <" + this.Caller + ">");
    tmpDumpList.add("  Network         = <" + this.Network + ">");
    tmpDumpList.add("  Remote Network  = <" + this.RemoteNetwork + ">");
    tmpDumpList.add("  Remote Switch   = <" + this.RemoteSwitch + ">");
    tmpDumpList.add("  Porting Prefix  = <" + this.PortingPrefix + ">");
    tmpDumpList.add("  EventStartDate  = <" + this.EventStartDate + ">");
    tmpDumpList.add("  EventEndDate    = <" + this.EventEndDate + ">");
    tmpDumpList.add("  Duration        = <" + this.Duration + ">");
    tmpDumpList.add("  Reseller        = <" + this.Reseller + ">");
    tmpDumpList.add("--------------------------------------");
    tmpDumpList.add("  Guiding Key     = <" + this.GuidingKey + ">");
    tmpDumpList.add("  User ID         = <" + this.UserId + ">");
    tmpDumpList.add("  Rate Plan       = <" + this.UserTariff + ">");
    tmpDumpList.add("  Base Rate Plan  = <" + this.BaseRateplan + ">");
    tmpDumpList.add("  ZoneOrigin      = <" + this.ZoneOrigin + ">");
    tmpDumpList.add("  ZoneDestination = <" + this.ZoneDestination + ">");
    tmpDumpList.add("  SpecZoneDest    = <" + this.SpecZoneDest + ">");
    tmpDumpList.add("--------------------------------------");
    tmpDumpList.add("  Retail Price    = <" + this.retailPrice + ">");
    tmpDumpList.add("  WholeSale Price = <" + this.wholeSalePrice + ">");
    tmpDumpList.add("  Local Polo      = <" + this.localPolo + ">");
    tmpDumpList.add("  Local Rolo      = <" + this.localRolo + ">");
    tmpDumpList.add("  Local Transit   = <" + this.localTransit + ">");
    tmpDumpList.add("  Remote Polo     = <" + this.remotePolo + ">");
    tmpDumpList.add("  Remote Rolo     = <" + this.remoteRolo + ">");
    tmpDumpList.add("  Remote Transit  = <" + this.remoteTransit + ">");
    tmpDumpList.add("  Aggregation ID  = <" + this.AggregationID + ">");
    tmpDumpList.add("  FinancialCode   = <" + this.FinancialCode + ">");
    tmpDumpList.add("  UsedDiscount    = <" + this.UsedDiscount + ">");
    if (this.UsedDiscount.isEmpty() == false)
    {
      tmpDumpList.add("--------------------------------------");
      tmpDumpList.add("  Discount RUM    = <" + this.DiscountRUM + ">");
      tmpDumpList.add("  Discount        = <" + this.DiscountGranted + ">");
      tmpDumpList.add("  Discount ID     = <" + this.DiscountCounter + ">");
      tmpDumpList.add("  RecID           = <" + this.RecId + ">");
    }

    // Add charge packets
    for (String cpd : this.getChargePacketsDump())
      tmpDumpList.add(cpd);
    
    // Add balance impacts
    for (String bid : this.getBalanceImpactsDump())
      tmpDumpList.add(bid);

    // Add errors
    Iterator<IError> it = this.getErrors().iterator();
    while (it.hasNext())
    {
        IError err = it.next();
        tmpDumpList.add("------------ Begin Error -------------");
        tmpDumpList.add("  Error  :     " + err.getMessage());
        tmpDumpList.add("  Message:     " + err.getType());
        tmpDumpList.add("  Set by:      " + err.getModuleName());
        tmpDumpList.add("------------ End Error ---------------");
    }

    return tmpDumpList;
  }

  public Object getSourceKey()
  {
    return null;
  }

  public void performFieldsValidation(String moduleName)
  {
    if (fields.length < EXPECTED_FIELDS)
    {
      RecordError tmpError = new RecordError("ERR_INP_MAP_FIELD_COUNT",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Invalid Number of Fields ("+ fields.length +" instead of "+EXPECTED_FIELDS+")");
      this.addError(tmpError);
      return;
    }

    if (fields[IDX_CALL_REF] == null || fields[IDX_CALL_REF].length()==0)
    { // headers or no record type
      return;
    }
            
    this.Type="SELL";

    if (fields[IDX_NETWORK] == null || fields[IDX_NETWORK].equalsIgnoreCase(""))
    {
      RecordError tmpError = new RecordError("ERR_NETWORK_MISSING",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Invalid Network - missing value");
      this.addError(tmpError);
    }
    else
    {
      Network = fields[IDX_NETWORK];
    }


    if (fields[IDX_CDR_UID] == null || fields[IDX_CDR_UID].equalsIgnoreCase(""))
    {
      RecordError tmpError = new RecordError("ERR_UID_MISSING",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Invalid CDR_UID Missing");
      this.addError(tmpError);
    }
    else
    {
      UID = fields[IDX_CDR_UID];
    }
    
    
    if (fields[IDX_CALL_TYPE] == null || fields[IDX_CALL_TYPE].equalsIgnoreCase(""))
    {
      RecordError tmpError = new RecordError("ERR_CALL_TYPE_MISSING",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Invalid Call Type - missing value");
      this.addError(tmpError);
    }
    else
    {
      this.Service = fields[IDX_CALL_TYPE];
    }

    // map 0, blank and "NULL" to null
    RemoteNetwork = fields[IDX_REMOTE_NETWORK];
    if (RemoteNetwork == null || RemoteNetwork.equals("0") || RemoteNetwork.isEmpty() || RemoteNetwork.equalsIgnoreCase("null"))
    {
      RemoteNetwork = "NULL";
    }

    // map 0, blank and "NULL" to null
    RemoteSwitch = fields[IDX_REMOTE_SWITCH];
    if (RemoteSwitch == null || RemoteSwitch.equals("0") || RemoteSwitch.isEmpty() || RemoteSwitch.equalsIgnoreCase("null"))
    {
      RemoteSwitch = "NULL";
    }

    if (fields[IDX_DIRECTION] == null || fields[IDX_DIRECTION].equalsIgnoreCase("") ||
            (!fields[IDX_DIRECTION].equals("IN") && !fields[IDX_DIRECTION].equals("OUT")))
    {
      RecordError tmpError = new RecordError("ERR_DIRECTION_INVALID",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Invalid Directon:"+fields[2]);
      this.addError(tmpError);
    }
    else
    {
      Direction = fields[IDX_DIRECTION];
    }

    // map 0, blank and "NULL" to null
    PortingPrefix = fields[IDX_PORTING_PREFIX];
    if (PortingPrefix == null || PortingPrefix.equals("0") || PortingPrefix.isEmpty() || PortingPrefix.equalsIgnoreCase("null"))
    {
      PortingPrefix = "NULL";
    }

    if (fields[IDX_START_DATE] == null || fields[IDX_START_DATE].equalsIgnoreCase(""))
    {
      RecordError tmpError = new RecordError("ERR_START_DATE_MISSING",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Missing start date");
      this.addError(tmpError);
    }
    else
    {
      try
      {
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
        this.EventStartDate = sdf.parse(fields[IDX_START_DATE]);
        
        // get the exact value in ms
        this.start_date = this.EventStartDate.getTime();
        
        // Get the seconds value for internal processing
        this.UTCEventDate = this.start_date / 1000;
      }
      catch (Exception e)
      {
        RecordError tmpError = new RecordError("ERR_START_DATE_INVALID",ErrorType.DATA_VALIDATION);
        tmpError.setModuleName("InputMap");
        tmpError.setErrorDescription("Invalid start date:"+fields[3]);
        this.addError(tmpError);
      }
    }

    if (fields[IDX_GUIDING_KEY] == null || fields[IDX_GUIDING_KEY].equalsIgnoreCase(""))
    {
      RecordError tmpError = new RecordError("ERR_MISSING_BILLING_ENTITY",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Missing BILLING_ENTITY");
      this.addError(tmpError);
    }
    else
    {
      this.GuidingKey=fields[IDX_GUIDING_KEY];
    }

    if (fields[IDX_NUMBER_TYPE] == null || fields[IDX_NUMBER_TYPE].equalsIgnoreCase(""))
    {
      RecordError tmpError = new RecordError("ERR_MISSING_NUMBER_TYPE",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Missing NUMBER_TYPE");
      this.addError(tmpError);
    }
    else
    {
      this.NumberType = fields[IDX_NUMBER_TYPE];
    }

    if (fields[IDX_DEST] == null || fields[IDX_DEST].equalsIgnoreCase(""))
    {
      //destination
      RecordError tmpError = new RecordError("ERR_MISSING_DEST",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Missing destination");
      this.addError(tmpError);
    }
    else
    {
      this.BNumber=fields[IDX_DEST];
      this.Destination=fields[IDX_DEST];
    }

    // don't check anything here because it might be null
    this.Caller=fields[IDX_CALLER];
    this.CallType = fields[IDX_CALL_TYPE];
    this.CLI = fields[IDX_CLI];
    this.UsageType = fields[IDX_USAGE_TYPE];
    this.DisplayNumber = fields[IDX_DISPLAY_NUMBER];
    this.StartDate = fields[IDX_START_DATE];
    this.EntryDate = fields[IDX_ENTRY_DATE];
    this.Platform = fields[IDX_PLATFORM];
    this.Machine =  fields[IDX_MACHINE];
    this.LinkNumber = fields[IDX_LINK_NUMBER];

    //check not necessary here Call Reference Field
    this.callReference = fields[IDX_CALL_REF];

    if (fields[IDX_DURATION] == null || fields[IDX_DURATION].equalsIgnoreCase(""))
    {
      //duration
      RecordError tmpError = new RecordError("ERR_MISSING_DURATION",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Missing duration");
      this.addError(tmpError);
    }
    else
    {
      try
      {
        this.Duration = Double.parseDouble(fields[IDX_DURATION]);
        if (this.Duration == 0)
        {
          RecordError tmpError = new RecordError("ERR_ZERO_DURATION",ErrorType.DATA_VALIDATION);
          tmpError.setModuleName("InputMap");
          tmpError.setErrorDescription("Zero duration");
          this.addError(tmpError);
        }
      }
      catch (Exception e)
      {
        RecordError tmpError = new RecordError("ERR_INVALID_DURATION",ErrorType.DATA_VALIDATION);
        tmpError.setModuleName("InputMap");
        tmpError.setErrorDescription("Invalid duration:"+fields[IDX_DURATION]);
        this.addError(tmpError);
      }
    }

    if (fields[IDX_NUMBER_TYPE] == null || fields[IDX_NUMBER_TYPE].equalsIgnoreCase(""))
    {
      //duration
      RecordError tmpError = new RecordError("ERR_NUMBERTYPE_MISSING_DURATION",ErrorType.DATA_VALIDATION);
      tmpError.setModuleName("InputMap");
      tmpError.setErrorDescription("Missing NumberType");
      this.addError(tmpError);
    }
    else
    {

        this.NumberType = fields[IDX_NUMBER_TYPE];

    }

    // The end date does not seem to give the right results. Calculate
    // from start date plus duration
    end_date = (long) (start_date + Duration * 1000);
    EventEndDate = new Date(end_date); // here we need milliseconds

    // Discountable RUM
    this.setRUMValue("DUR", this.Duration);
    
    // Non-discountable RUM
    this.setRUMValue("DURN", this.Duration);
  }

  String unmapSuspenseData()
  {
    StringBuilder recordData = null;

    // We use the string buffer for the reassembly of the record. Avoid
    // just catenating strings, as it is a LOT slower because of the
    // java internal string handling (it has to allocate/deallocate many
    // times to rebuild the string).
    recordData = new StringBuilder(1024);

    String ErrorCode = getErrors().get(0).getMessage();
    Recycle_Count++;

    recordData.append(CDRRecord.RECYCLE_TAG);
    recordData.append(CDRRecord.FIELD_SPLITTER);
    recordData.append(ErrorCode);
    recordData.append(CDRRecord.FIELD_SPLITTER);
    recordData.append(Recycle_Count);
    recordData.append(CDRRecord.FIELD_SPLITTER);
    recordData.append(this.OriginalData);

    return recordData.toString();
  }
}
