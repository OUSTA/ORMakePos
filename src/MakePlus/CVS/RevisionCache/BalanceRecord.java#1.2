/* ====================================================================
 * Limited Evaluation License:
 *
 * The exclusive owner of this work is Tiger Shore Management Ltd.
 * This work, including all associated documents and components
 * is Copyright Tiger Shore Management Ltd 2006-2010.
 *
 * The following restrictions apply unless they are expressly relaxed in a
 * contractual agreement between the license holder or one of its officially
 * assigned agents and you or your organisation:
 *
 * 1) This work may not be disclosed, either in full or in part, in any form
 *    electronic or physical, to any third party. This includes both in the
 *    form of source code and compiled modules.
 * 2) This work contains trade secrets in the form of architecture, algorithms
 *    methods and technologies. These trade secrets may not be disclosed to
 *    third parties in any form, either directly or in summary or paraphrased
 *    form, nor may these trade secrets be used to construct products of a
 *    similar or competing nature either by you or third parties.
 * 3) This work may not be included in full or in part in any application.
 * 4) You may not remove or alter any proprietary legends or notices contained
 *    in or on this work.
 * 5) This software may not be reverse-engineered or otherwise decompiled, if
 *    you received this work in a compiled form.
 * 6) This work is licensed, not sold. Possession of this software does not
 *    imply or grant any right to you.
 * 7) You agree to disclose any changes to this work to the copyright holder
 *    and that the copyright holder may include any such changes at its own
 *    discretion into the work
 * 8) You agree not to derive other works from the trade secrets in this work,
 *    and that any such derivation may make you liable to pay damages to the
 *    copyright holder
 * 9) You agree to use this software exclusively for evaluation purposes, and
 *    that you shall not use this software to derive commercial profit or
 *    support your business or personal activities.
 *
 * This software is provided "as is" and any expressed or impled warranties,
 * including, but not limited to, the impled warranties of merchantability
 * and fitness for a particular purpose are disclaimed. In no event shall
 * Tiger Shore Management or its officially assigned agents be liable to any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including but not limited to, procurement of substitute goods or services;
 * Loss of use, data, or profits; or any business interruption) however caused
 * and on theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of
 * this software, even if advised of the possibility of such damage.
 * This software contains portions by The Apache Software Foundation, Robert
 * Half International.
 * ====================================================================
 */

package MakePlus;

import OpenRate.record.ErrorType;
import OpenRate.record.IError;
import OpenRate.record.RatingRecord;
import OpenRate.record.RecordError;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * basic implementation of a record that will have to be aggregated into the balance table
 * @author marco
 */
public class BalanceRecord extends RatingRecord
{
  // this is the CVS version info
  public static String CVS_MODULE_INFO = "OpenRate, $RCSfile: BalanceRecord.java,v $, $Revision: 1.2 $, $Date: 2011/02/03 15:36:51 $";

  private static final String INPUT_DELIMITER=";";

  public String User;
  public String Date;
  public String AggID;
  public double NewBal;

  public BalanceRecord(String user,String date,double newBal)
  {
    this.User=user;
    this.Date=date;
    this.NewBal=newBal;
  }

  public BalanceRecord(String data)
  {
    this.OriginalData=data;
    this.fields = this.getOriginalData().split(INPUT_DELIMITER);
  }

  public boolean performFieldValidation(String moduleName)
  {
    if (fields.length<5)
    {
      RecordError tmpError = new RecordError("Invalid Number of Fields",ErrorType.DATA_VALIDATION,moduleName);
      this.addError(tmpError);
      return false;
    }
    if (fields[1]==null || fields[1].length()==0)
    {
      RecordError tmpError = new RecordError("Invalid User",ErrorType.DATA_VALIDATION,moduleName);
      this.addError(tmpError);
      return false;
    }
    if (fields[2]==null || fields[2].length()==0)
    {
      RecordError tmpError = new RecordError("Invalid Date",ErrorType.DATA_VALIDATION,moduleName);
      this.addError(tmpError);
      return false;
    }
    if (fields[3]==null || fields[3].length()==0)
    {
      RecordError tmpError = new RecordError("Invalid Aggregation ID",ErrorType.DATA_VALIDATION,moduleName);
      this.addError(tmpError);
      return false;
    }
    try
    {
      Double bal = Double.parseDouble(fields[5]); //fields[4] is the event count
      this.User=fields[1];
      this.Date=fields[2];
      this.AggID=fields[3];
      this.NewBal=bal.doubleValue();
    }
    catch (NumberFormatException e)
    {
    {
      RecordError tmpError = new RecordError("Invalid Balance",ErrorType.DATA_VALIDATION,moduleName);
      this.addError(tmpError);
      return false;
    }
    }

    return true;
  }

  /**
   * Return the dump-ready data
   *
   * @return The dump info strings
   */
  public ArrayList<String> getDumpInfo()
  {

    ArrayList<String> tmpDumpList = null;
    tmpDumpList = new ArrayList<String>();

    // Format the fields
    tmpDumpList.add("============ BEGIN RECORD ============");
    tmpDumpList.add("  Record Number   = <" + this.RecordNumber + ">");
    tmpDumpList.add("  Output Streams  = <" + this.getOutputs() + ">");
    tmpDumpList.add("--------------------------------------");
    tmpDumpList.add("  User            = <" + this.User + ">");
    tmpDumpList.add("  Date            = <" + this.Date + ">");
    tmpDumpList.add("  AggID           = <" + this.AggID + ">");
    tmpDumpList.add("  NewBal          = <" + this.NewBal + ">");

    Iterator<IError> it = this.getErrors().iterator();
    while (it.hasNext())
    {
        IError err = it.next();
        tmpDumpList.add("------------ Begin Error -------------");
        tmpDumpList.add("  Message:     " + err.getMessage());
        tmpDumpList.add("  Set by:      " + err.getModuleName());
        tmpDumpList.add("------------ End Error ---------------");
    }

    return tmpDumpList;
  }

}
