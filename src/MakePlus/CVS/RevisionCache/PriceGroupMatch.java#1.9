package MakePlus;

import OpenRate.process.AbstractRegexMatch;
import OpenRate.record.IRecord;
import OpenRate.record.RecordError;
import OpenRate.record.ErrorType;

/**
 * 
 */
public class PriceGroupMatch
  extends AbstractRegexMatch
{
  // this is the CVS version info
  public static String CVS_MODULE_INFO = "OpenRate, $RCSfile: PriceGroupMatch.java,v $, $Revision: 1.9 $, $Date: 2011/06/28 13:24:38 $";

  // String key used for searching
  private String[] tmpSearchParameters = new String[10];

  // -----------------------------------------------------------------------------
  // ------------------ Start of inherited Plug In functions ---------------------
  // -----------------------------------------------------------------------------

 /**
  * This is called when a data record is encountered. You should do any normal
  * processing here.
  */
  @Override
  public IRecord procValidRecord(IRecord r)
  {
    String RegexGroup;
    String RegexResult;
    int Index;
    RecordError tmpError;
    CDRRecord CurrentRecord = (CDRRecord) r;

    if (CurrentRecord.RECORD_TYPE == CDRRecord.CDR_RECORD)
    {        
      // Prepare the paramters to perform the search on
      tmpSearchParameters[0]=CurrentRecord.Network;
      tmpSearchParameters[1]=CurrentRecord.RemoteNetwork;
      tmpSearchParameters[2]=CurrentRecord.PortingPrefix;
      tmpSearchParameters[3]=CurrentRecord.Direction;
      tmpSearchParameters[4]=CurrentRecord.Type;
      tmpSearchParameters[5]=CurrentRecord.Service;
      tmpSearchParameters[6]=CurrentRecord.RemoteSwitch;
      tmpSearchParameters[7]=CurrentRecord.ZoneOrigin;

      for (Index = 0; Index < CurrentRecord.getChargePacketCount(); Index++)
      {
        tmpSearchParameters[8]=CurrentRecord.getChargePacket(Index).ZoneResult;
        tmpSearchParameters[9]=CurrentRecord.getChargePacket(Index).TimeResult;

        RegexGroup = getRatePlan(CurrentRecord.getChargePacket(Index).RatePlanName, CurrentRecord.getChargePacket(Index).PacketType);
        CurrentRecord.getChargePacket(Index).RatePlanName = RegexGroup; 

        // Look up the rate model to use
        RegexResult = getRegexMatch(RegexGroup,tmpSearchParameters);

        // See if we get a match on the specific plan
        if (RegexResult.equals("NOMATCH"))
        {
          // No match on the specific plan - try to look if there is a base rateplan
          if ((CurrentRecord.BaseRateplan != null) && (CurrentRecord.BaseRateplan.length()>0))
          {
            RegexGroup = getRatePlan(CurrentRecord.BaseRateplan, CurrentRecord.getChargePacket(Index).PacketType);
            CurrentRecord.getChargePacket(Index).RatePlanName = RegexGroup; 
            RegexResult = getRegexMatch(RegexGroup,tmpSearchParameters);
            if (RegexResult.equals("NOMATCH"))
            {
              tmpError = new RecordError("ERR_PRICE_MODEL_NOT_FOUND", ErrorType.DATA_NOT_FOUND);
              tmpError.setModuleName(getSymbolicName());
              tmpError.setErrorDescription("Could not find price model for base rate plan:"+CurrentRecord.BaseRateplan + " charge packet type " + CurrentRecord.getChargePacket(Index).PacketType);
              CurrentRecord.addError(tmpError);
              return r;
            }
            else
            {
              // falling back on the base rateplan
              CurrentRecord.getChargePacket(Index).RatePlanName = CurrentRecord.BaseRateplan;
              CurrentRecord.getChargePacket(Index).PriceGroup = RegexResult;
              CurrentRecord.getChargePacket(Index).PriceModel = RegexResult;
            }
          }
        }
        else
        {
          CurrentRecord.getChargePacket(Index).PriceGroup = RegexResult;
          CurrentRecord.getChargePacket(Index).PriceModel = RegexResult;
        }
      }
    }

    return r;
  }

 /**
  * This is called when a data record with errors is encountered. You should do
  * any processing here that you have to do for error records, e.g. stratistics,
  * special handling, even error correction!
  */
  @Override
  public IRecord procErrorRecord(IRecord r)
  {
    return r;
  }
  
  public String getRatePlan(String ratePlanName, String packetType)
  {
    if (packetType.equals("R") | packetType.equals("W"))
    {
      return ratePlanName + "_" + packetType;
    }
    else
    {
      return packetType;
    }
  }
}

