/* ====================================================================
 * Limited Evaluation License:
 *
 * The exclusive owner of this work is Tiger Shore Management Ltd.
 * This work, including all associated documents and components
 * is Copyright Tiger Shore Management Ltd 2006-2010.
 *
 * The following restrictions apply unless they are expressly relaxed in a
 * contractual agreement between the license holder or one of its officially
 * assigned agents and you or your organisation:
 *
 * 1) This work may not be disclosed, either in full or in part, in any form
 *    electronic or physical, to any third party. This includes both in the
 *    form of source code and compiled modules.
 * 2) This work contains trade secrets in the form of architecture, algorithms
 *    methods and technologies. These trade secrets may not be disclosed to
 *    third parties in any form, either directly or in summary or paraphrased
 *    form, nor may these trade secrets be used to construct products of a
 *    similar or competing nature either by you or third parties.
 * 3) This work may not be included in full or in part in any application.
 * 4) You may not remove or alter any proprietary legends or notices contained
 *    in or on this work.
 * 5) This software may not be reverse-engineered or otherwise decompiled, if
 *    you received this work in a compiled form.
 * 6) This work is licensed, not sold. Possession of this software does not
 *    imply or grant any right to you.
 * 7) You agree to disclose any changes to this work to the copyright holder
 *    and that the copyright holder may include any such changes at its own
 *    discretion into the work
 * 8) You agree not to derive other works from the trade secrets in this work,
 *    and that any such derivation may make you liable to pay damages to the
 *    copyright holder
 * 9) You agree to use this software exclusively for evaluation purposes, and
 *    that you shall not use this software to derive commercial profit or
 *    support your business or personal activities.
 *
 * This software is provided "as is" and any expressed or impled warranties,
 * including, but not limited to, the impled warranties of merchantability
 * and fitness for a particular purpose are disclaimed. In no event shall
 * Tiger Shore Management or its officially assigned agents be liable to any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including but not limited to, procurement of substitute goods or services;
 * Loss of use, data, or profits; or any business interruption) however caused
 * and on theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of
 * this software, even if advised of the possibility of such damage.
 * This software contains portions by The Apache Software Foundation, Robert
 * Half International.
 * ====================================================================
 */

package MakePlus;

import OpenRate.process.AbstractRUMTimeMatch;
import OpenRate.record.ChargePacket;
import OpenRate.record.ErrorType;
import OpenRate.record.IError;
import OpenRate.record.RatingRecord;
import OpenRate.record.RecordError;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

/**
 * A CDRRecord corresponds to a unit of work that is being processed by the
 * pipeline. Records are created in the InputAdapter, pass through the Pipeline,
 * and written out in the OutputAdapter. Any stage of the pipeline my update
 * the record in any way, provided that later stages in the processing and the
 * output adapter know how to treat the record they receive.
 *
 * As an alternative, you may define a less flexible record format as you wish
 * and fill in the fields as required, but this costs performance.
 *
 * Generally, the record should know how to handle the following operations by
 * linking the appropriate method:
 *
 * mapOriginalData()   [mandatory]
 * -----------------
 * Transformation from a flat record as read by the input adapter to a formatted
 * record.
 *
 * unmapOriginalData() [mandatory if you wish to write output files]
 * -------------------
 * Transformation from a formatted record to a flat record ready for output.
 *
 * getDumpInfo()       [optional]
 * -------------
 * Preparation of the dump equivalent of the formatted record, ready for
 * dumping out to a dump file.
 *
 * In this simple example, we require only to read the "B-Number", and write the
 * "Destination" as a result of this. Because of the simplicity of the example
 * we do not perform a full mapping, we just handle the fields we want directly,
 * which is one of the advantages of the BBPA model (map as much as you want or
 * as little as you have to).
 *
 */
public class CDRRecord
  extends RatingRecord
{
  // this is the CVS version info
  public static String CVS_MODULE_INFOUserId = "OpenRate, $RCSfile: CDRRecord.java,v $, $Revision: 1.5 $, $Date: 2011/02/03 15:36:51 $";

  // Used to manage recycles
  public static final String RECYCLE_TAG = "ORRECYCLE";

    // Field Splitter in the records
  public static final String FIELD_SPLITTER = ";";

  // Field Splitter in the records
  public static String    INPUT_DELIMITER = ",";
  public static final String TRX_TYPE_TEL = "1";
  public static final int EXPECTED_FIELDS = 9;

  // expected format for dates in CDR
  public static final String DATE_FORMAT="dd/MM/yyyy HH:mm:SS";
  public static final String DEFAULT_RESELLER="Live";
  public int    Recycle_Count = 0;

  ArrayList<String> AggFilter = new ArrayList<String>();
  
  // Worker variables to save references during processing. We are using the
  // B-Number to look up the destination.

  public String Type = null;
  public String Direction = null;
  public String User = null;
  public String UserNormalised = null;
  public String Destination = null;
  public String Caller = null;
  public String Network = null;
  public String TrxType = null;
  public String ZoneOrigin = null;
  public String ZoneDestination = null;
  public String ZoneResult = null;
  public String Reseller = DEFAULT_RESELLER;
  public String callReference = null;
  public double Duration;
  public double Cost;
  public double WholeSale_Price;
  public double Retail_Price;
 
  public long start_date;
  public long end_date;
  public String FinancialCode;

  // SalesForce integration fields
  public int    UserId;
  public String GuidingKey;
  public int    BalanceGroup;
  public String UserTariff;
  public String BaseRateplan;
  public String AggregationID;

  // duplicate flag
  public boolean duplicate = false;
   
  /**
    * Default Constructor for SimpleRecord.
    */
  public CDRRecord()
  {
    super();
  }

  /**
    *
    * Overloaded Constructor for SimpleRecord.
    *
    * @param OriginalData - the flat record we are to map
    */
  public CDRRecord(String OriginalData)
  {
    super();
  }

  /**
   * We split up the record at the tabs, and put the information into fields
   * so that we can manipulate it as we want.
   *
   */
  public void mapOriginalData()
  {
    this.fields = this.getOriginalData().split(INPUT_DELIMITER);
  }

  /**
   * Reconstruct the record from the field values, replacing the original
   * structure of tab separated records
   *
   * @return The unmapped original data
   */
  public String unmapOriginalData()
  {

    int NumberOfFields;
    int i;
    StringBuilder tmpReassemble;

    // We use the string buffer for the reassembly of the record. Avoid
    // just catenating strings, as it is a LOT slower because of the
    // java internal string handling (it has to allocate/deallocate many
    // times to rebuild the string).
    tmpReassemble = new StringBuilder(1024);

    // write the destination information back
    // this.setField(DESTINATION_IDX, Destination);
    NumberOfFields = this.fields.length;

    for (i = 0; i < NumberOfFields; i++)
    {

      if (i == 0)
      {
        tmpReassemble.append(this.fields[i]);
      }
      else
      {
        tmpReassemble.append(INPUT_DELIMITER);
        tmpReassemble.append(this.fields[i]);
      }
    }

    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.Retail_Price);
    tmpReassemble.append(INPUT_DELIMITER);
    tmpReassemble.append(this.WholeSale_Price);

    return tmpReassemble.toString();
  }


  /**
   * Return the dump-ready data
   *
   * @return The dump info strings
   */
  public ArrayList<String> getDumpInfo()
  {

    ArrayList<String> tmpDumpList = null;
    tmpDumpList = new ArrayList<String>();

    // Format the fields
    tmpDumpList.add("============ BEGIN RECORD ============");
    tmpDumpList.add("  Record Number   = <" + this.RecordNumber + ">");
    tmpDumpList.add("  Output Streams  = <" + this.getOutputs() + ">");
    tmpDumpList.add("--------------------------------------");
    tmpDumpList.add("  Record Type     = <" + this.Type + ">");
    tmpDumpList.add("  Direction       = <" + this.Direction + ">");
    tmpDumpList.add("  Service         = <" + this.Service + ">");
    tmpDumpList.add("  User            = <" + this.User + ">");
    tmpDumpList.add("  User Normalised = <" + this.UserNormalised + ">");
    tmpDumpList.add("  Destination     = <" + this.Destination + ">");
    tmpDumpList.add("  Caller          = <" + this.Caller + ">");
    tmpDumpList.add("  Network         = <" + this.Network + ">");
    tmpDumpList.add("  ZoneOrigin      = <" + this.ZoneOrigin + ">");
    tmpDumpList.add("  ZoneDestination = <" + this.ZoneDestination + ">");
    tmpDumpList.add("  Zone Result     = <" + this.ZoneResult + ">");
    tmpDumpList.add("  Rate Plan       = <" + this.UserTariff + ">");
    tmpDumpList.add("  Base Rate Plan  = <" + this.BaseRateplan + ">");
    tmpDumpList.add("  EventStartDate  = <" + this.EventStartDate + ">");
    tmpDumpList.add("  EventEndDate    = <" + this.EventEndDate + ">");
    tmpDumpList.add("  Duration        = <" + this.Duration + ">");
    tmpDumpList.add("  Reseller        = <" + this.Reseller + ">");
    tmpDumpList.add("  Cost            = <" + this.Cost + ">");
    tmpDumpList.add("  Retail_Price    = <" + this.Retail_Price + ">");
    tmpDumpList.add("  WholeSale_Price = <" + this.WholeSale_Price + ">");
    tmpDumpList.add("  Guiding Key     = <" + this.GuidingKey + ">");
    tmpDumpList.add("  User ID         = <" + this.UserId + ">");
    tmpDumpList.add("  Aggregation ID  = <" + this.AggregationID + ">");
    tmpDumpList.add("  Call Reference  = <" + this.callReference + ">");

    for (String cpd : this.getChargePacketsDump())
      tmpDumpList.add(cpd);
    for (String bid : this.getBalanceImpactsDump())
      tmpDumpList.add(bid);

    Iterator<IError> it = this.getErrors().iterator();
    while (it.hasNext())
    {
        IError err = it.next();
        tmpDumpList.add("------------ Begin Error -------------");
        tmpDumpList.add("  Message:     " + err.getMessage());
        tmpDumpList.add("  Set by:      " + err.getModuleName());
        tmpDumpList.add("------------ End Error ---------------");
    }

    return tmpDumpList;
  }

  public Object getSourceKey()
  {

    return null;
  }

    public void performFieldsValidation(String moduleName)
    {
        if (fields[0] == null || fields[0].length()==0)
        { // headers or no record type
          return;
        }
        else if (fields[8].equalsIgnoreCase(TRX_TYPE_TEL))
        { // Transaction Type = 1 -> mobile call (telephony)
          TrxType=fields[8];
          this.Service="TEL";
          this.Type="SELL";

          if (fields.length < EXPECTED_FIELDS)
          {
              RecordError tmpError = new RecordError("Invalid Number of Fields ("+ fields.length +" instead of "+EXPECTED_FIELDS+")",
                      ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
              return;
          }

          if (fields[1] == null || fields[1].equalsIgnoreCase(""))
          { 
              RecordError tmpError = new RecordError("Invalid Network",ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
          }
          else
          {
              Network = fields[1];
          }
           
          if (fields[2] == null || fields[2].equalsIgnoreCase("") ||
                  (!fields[2].equalsIgnoreCase("inbound") && !fields[2].equalsIgnoreCase("outbound")))
          {
              RecordError tmpError = new RecordError("Invalid Direction",ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
          }
          else
          {
              Direction = fields[2];
          }

          if (fields[3] == null || fields[3].equalsIgnoreCase(""))
          {
            RecordError tmpError = new RecordError("Invalid StartDate",ErrorType.DATA_VALIDATION,moduleName);
            this.addError(tmpError);
          }
          else
          {
            try
            {
              SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
              this.EventStartDate = sdf.parse(fields[3]);
              this.start_date = this.UTCEventDate = this.EventStartDate.getTime()/1000;
            }
            catch (Exception e)
            {
              RecordError tmpError = new RecordError("Invalid StartDate",ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
            }
          }

          if (fields[4] == null || fields[4].equalsIgnoreCase(""))
          { //dateTimeConnect
              RecordError tmpError = new RecordError("Invalid User",ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
          }
          else
          {
            this.User=fields[4];
            this.UserNormalised=normaliseUser(this.User);
            this.GuidingKey=this.User;
          }

          if (fields[6] == null || fields[6].equalsIgnoreCase(""))
          { //destination
              RecordError tmpError = new RecordError("Invalid Destination",ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
          }
          else
          {
            this.Destination=fields[6];
          }

          // don't check anything here because it might be null
          this.Caller=fields[5];

          //check not necessary here Call Reference Field
          this.callReference = fields[0];

          if (fields[7] == null || fields[7].equalsIgnoreCase(""))
          { //duration
              RecordError tmpError = new RecordError("Invalid Duration",ErrorType.DATA_VALIDATION,moduleName);
              this.addError(tmpError);
          }
          else
          {
              try
              {
                this.Duration = Double.parseDouble(fields[7]);
                if (this.Duration == 0)
                {
                  RecordError tmpError = new RecordError("Zero Duration",ErrorType.DATA_VALIDATION,moduleName);
                  this.addError(tmpError);
                }
              }
              catch (Exception e)
              {
                RecordError tmpError = new RecordError("Invalid Duration",ErrorType.DATA_VALIDATION,moduleName);
                this.addError(tmpError);
              }
          }

      // The end date does not seem to give the right results. Calculate
      // from start date plus duration
      end_date = (long) (start_date + Duration);
      EventEndDate = new Date(end_date * 1000); // here we need milliseconds

      ChargePacket cp_new = new ChargePacket();
      cp_new.TimeSplitting = AbstractRUMTimeMatch.TIME_SPLITTING_CHECK_SPLITTING;
      cp_new.RUMName = "DUR";
      cp_new.PacketType = "R"; // rating
      this.setRUMValue(cp_new.RUMName, this.Duration);
      this.addChargePacket(cp_new);
    }
  }

  private String normaliseUser(String user)
  {
    return user.replace("+", "00");
  }
    
  String unmapSuspenseData()
  {
    StringBuilder recordData = null;

    // We use the string buffer for the reassembly of the record. Avoid
    // just catenating strings, as it is a LOT slower because of the
    // java internal string handling (it has to allocate/deallocate many
    // times to rebuild the string).
    recordData = new StringBuilder(1024);

    String ErrorCode = getErrors().get(0).getMessage();
    Recycle_Count++;

    recordData.append(CDRRecord.RECYCLE_TAG);
    recordData.append(CDRRecord.FIELD_SPLITTER);
    recordData.append(ErrorCode);
    recordData.append(CDRRecord.FIELD_SPLITTER);
    recordData.append(Recycle_Count);
    recordData.append(CDRRecord.FIELD_SPLITTER);
    recordData.append(this.OriginalData);


    return recordData.toString();
  }
}
